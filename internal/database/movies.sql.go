// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: movies.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const grabMovie = `-- name: GrabMovie :one
SELECT id, created_at, movie_id, original_title, title, overview, release_date, poster_path, vote_average, imdb, tmdb, user_id FROM movies
WHERE original_title = $1
`

func (q *Queries) GrabMovie(ctx context.Context, originalTitle string) (Movie, error) {
	row := q.db.QueryRowContext(ctx, grabMovie, originalTitle)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.MovieID,
		&i.OriginalTitle,
		&i.Title,
		&i.Overview,
		&i.ReleaseDate,
		&i.PosterPath,
		&i.VoteAverage,
		&i.Imdb,
		&i.Tmdb,
		&i.UserID,
	)
	return i, err
}

const likedMovie = `-- name: LikedMovie :one
INSERT INTO movies (id, created_at, movie_id, original_title, title, overview, release_date, poster_path, vote_average, imdb, tmdb, user_id)
VALUES (
    gen_random_uuid(),
    NOW(),
    $1, 
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10
)
RETURNING id, created_at, movie_id, original_title, title, overview, release_date, poster_path, vote_average, imdb, tmdb, user_id
`

type LikedMovieParams struct {
	MovieID       int32
	OriginalTitle string
	Title         string
	Overview      string
	ReleaseDate   string
	PosterPath    string
	VoteAverage   float64
	Imdb          string
	Tmdb          int32
	UserID        uuid.UUID
}

func (q *Queries) LikedMovie(ctx context.Context, arg LikedMovieParams) (Movie, error) {
	row := q.db.QueryRowContext(ctx, likedMovie,
		arg.MovieID,
		arg.OriginalTitle,
		arg.Title,
		arg.Overview,
		arg.ReleaseDate,
		arg.PosterPath,
		arg.VoteAverage,
		arg.Imdb,
		arg.Tmdb,
		arg.UserID,
	)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.MovieID,
		&i.OriginalTitle,
		&i.Title,
		&i.Overview,
		&i.ReleaseDate,
		&i.PosterPath,
		&i.VoteAverage,
		&i.Imdb,
		&i.Tmdb,
		&i.UserID,
	)
	return i, err
}

const retrieveMoviesByUser = `-- name: RetrieveMoviesByUser :many
SELECT id, created_at, movie_id, original_title, title, overview, release_date, poster_path, vote_average, imdb, tmdb, user_id FROM movies
WHERE user_id = $1
ORDER BY created_at ASC
`

func (q *Queries) RetrieveMoviesByUser(ctx context.Context, userID uuid.UUID) ([]Movie, error) {
	rows, err := q.db.QueryContext(ctx, retrieveMoviesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.MovieID,
			&i.OriginalTitle,
			&i.Title,
			&i.Overview,
			&i.ReleaseDate,
			&i.PosterPath,
			&i.VoteAverage,
			&i.Imdb,
			&i.Tmdb,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unlikeMovie = `-- name: UnlikeMovie :exec
DELETE FROM movies
WHERE id = $1
`

func (q *Queries) UnlikeMovie(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, unlikeMovie, id)
	return err
}
